/*

//* i am doing by createReducer insted of createSlice

import { createAction, createReducer } from "@reduxjs/toolkit";

//*interface
interface StateType {
  count: number;
}
const initialState: StateType = { count: 0 };

export const increment = createAction("increment");
export const decrement = createAction("decrement");
//* Define action creators with payload
const custom = createAction<number>("custom");

//* When using createReducer with the builder function, you don't need to return a new state explicitly. Redux Toolkit takes care of immutability for you, allowing you to directly modify the state object within your reducer functions.
export const rootReducer = createReducer(initialState, (builder) => {
  builder
    //* here use "increment"  or through createAction
    .addCase(increment, (state) => {
      state.count += 1;
    })
    .addCase(decrement, (state) => {
      state.count -= 1;
    })
    .addCase(custom, (state, action) => {
      //* Access payload and update the state
      state.count += action.payload;
    });
});

//* usage

To use the Redux Toolkit code I provided in your React application to update the state, you need to dispatch the actions created by `createAction`. Here's how you can do it:

Assuming you have a React component where you want to use this state and actions:

1. Import the Redux store and the actions:


import { useSelector, useDispatch } from 'react-redux';
import { increment, decrement } from './yourReducerFile'; 

2. Set up the Redux state and dispatch function:


const count = useSelector((state) => state.rootReducer.count);
const dispatch = useDispatch();

function YourComponent() {
  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => dispatch(increment(1))}>Increment</button>
      <button onClick={() => dispatch(decrement(1))}>Decrement</button>
    </div>
  );
}

export default YourComponent;




*/

// using  createSlice

import { PayloadAction, createSlice } from "@reduxjs/toolkit";

//*interface
interface StateType {
  count: number;
}
const initialState: StateType = { count: 0 };

export const counterSlice = createSlice({
  name: "counter",
  initialState,
  reducers: {
    increment: (state) => {
      state.count += 1;
    },
    decrement: (state) => {
      state.count -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.count += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;
export const selectCount = (state: StateType) => state.count; //if only one reducer

// export const selectCount = (state: { myReducer: StateType }) => state.myReducer.count; // if multiple reducers

export default counterSlice.reducer;
